import random
import discord
from discord.ext import commands
from dotenv import load_dotenv
from youtubesearchpython import VideosSearch
import yt_dlp
import os
import asyncio
from datetime import datetime
import pytz
from myserver import server_on

load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

custom_responses = {
    "bot ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£": "‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠ doro ‡∏Ñ‡πà‡∏∞ ü§ñ",
    "doro ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á": "‡∏â‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞!",
    "doro ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∏‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞!",
}

user_contexts = {}
queue = {}

ROLE_OPTIONS = [
    {"label": "‡∏à‡∏±‡∏Å‡∏û‡∏£‡∏£‡∏î‡∏¥‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå", "value": "‡∏à‡∏±‡∏Å‡∏û‡∏£‡∏£‡∏î‡∏¥‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå", "emoji": "üå∏"},
    {"label": "‡∏ú‡∏π‡πâ‡∏Ñ‡∏∏‡∏°‡∏Å‡∏é", "value": "‡∏ú‡∏π‡πâ‡∏Ñ‡∏∏‡∏°‡∏Å‡∏é", "emoji": "‚úçÔ∏è"},
    {"label": "‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡∏Å", "value": "‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡∏Å", "emoji": "üüß"},
    {"label": "‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô", "value": "‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô", "emoji": "ü™õ"},
]

# Role classes

class RoleSelect(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label=r["label"], value=r["value"], emoji=r["emoji"])
            for r in ROLE_OPTIONS
        ]
        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏¢‡∏®)", min_values=1, max_values=len(options), options=options)

    async def callback(self, interaction: discord.Interaction):
        selected_roles = self.values
        guild_roles = interaction.guild.roles

        selected_role_objs = [
            discord.utils.get(guild_roles, name=role_name)
            for role_name in selected_roles
            if discord.utils.get(guild_roles, name=role_name)
        ]

        roles_to_remove = [
            discord.utils.get(guild_roles, name=r["value"])
            for r in ROLE_OPTIONS
            if discord.utils.get(guild_roles, name=r["value"]) in interaction.user.roles
            and r["value"] not in selected_roles
        ]
        try:
            await interaction.user.remove_roles(*roles_to_remove)
            await interaction.user.add_roles(*selected_role_objs)
            await interaction.response.send_message("‚úÖ ‡∏¢‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏®", ephemeral=True)

class RemoveRolesButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="‡∏•‡∏ö‡∏¢‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", style=discord.ButtonStyle.danger, emoji="üóëÔ∏è")

    async def callback(self, interaction: discord.Interaction):
        roles_to_remove = [
            discord.utils.get(interaction.guild.roles, name=r["value"])
            for r in ROLE_OPTIONS
            if discord.utils.get(interaction.guild.roles, name=r["value"]) in interaction.user.roles
        ]
        try:
            await interaction.user.remove_roles(*roles_to_remove)
            await interaction.response.send_message("üßπ ‡∏¢‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏¢‡∏®", ephemeral=True)

class RoleView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(RoleSelect())
        self.add_item(RemoveRolesButton())

class RequestRoleButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="‡∏Ç‡∏≠‡∏¢‡∏®‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°", style=discord.ButtonStyle.primary)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏¢‡∏®‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)

class TextInputModal(discord.ui.Modal, title="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ç‡∏≠‡∏¢‡∏®"):
    reason = discord.ui.TextInput(label="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏¢‡∏®", style=discord.TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message(f"‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {self.reason}", ephemeral=True)

class TextInputButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ç‡∏≠‡∏¢‡∏®", style=discord.ButtonStyle.secondary)

    async def callback(self, interaction: discord.Interaction):
        modal = TextInputModal()
        await interaction.response.send_modal(modal)

class RequestRoleView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(RoleSelect())  # ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏® (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏¢‡∏®‡πÑ‡∏î‡πâ)
        self.add_item(RequestRoleButton())
        self.add_item(TextInputButton())
        self.add_item(RemoveRolesButton())


QUESTION_CHOICES = {
    "‡πÄ‡∏≠‡∏≤ / ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤ / ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à": ["‡πÄ‡∏≠‡∏≤", "‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤", "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"],
    "‡πÄ‡∏•‡πà‡∏ô / ‡πÑ‡∏°‡πà‡πÄ‡∏•‡πà‡∏ô": ["‡πÄ‡∏•‡πà‡∏ô", "‡πÑ‡∏°‡πà‡πÄ‡∏•‡πà‡∏ô"],
    "‡πÉ‡∏ä‡πà / ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà": ["‡πÉ‡∏ä‡πà", "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"],
}

# ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏´‡∏ß‡∏ï: message_id -> { user_id: answer, ... }
vote_records = {}

class AskQuestionModal(discord.ui.Modal, title="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"):
    question = discord.ui.TextInput(label="‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", style=discord.TextStyle.paragraph)

    def __init__(self, choice_set_name, question_channel_id, result_channel_id):
        super().__init__()
        self.choice_set_name = choice_set_name
        self.question_channel_id = question_channel_id
        self.result_channel_id = result_channel_id

    async def on_submit(self, interaction: discord.Interaction):
        guild = interaction.guild
        question_channel = guild.get_channel(self.question_channel_id)
        result_channel = guild.get_channel(self.result_channel_id)

        if question_channel is None or result_channel is None:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï", ephemeral=True)
            return

        choices = QUESTION_CHOICES.get(self.choice_set_name)
        if not choices:
            await interaction.response.send_message("‚ùå ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
            return

        embed = discord.Embed(
            title="üì¢ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
            description=self.question.value,
            color=0xFFB6C1
        )
        embed.set_footer(text=f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á | ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {self.choice_set_name}")

        class AnswerSelect(discord.ui.Select):
            def __init__(self):
                opts = [discord.SelectOption(label=opt) for opt in choices]
                super().__init__(placeholder="‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", options=opts, min_values=1, max_values=1)

            async def callback(self, interaction2: discord.Interaction):
                user = interaction2.user
                msg_id = interaction2.message.id
                user_votes = vote_records.setdefault(msg_id, {})
                user_votes[user.id] = self.values[0]

                # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï
                summary = {}
                for ans in choices:
                    summary[ans] = []

                for uid, ans in user_votes.items():
                    member = guild.get_member(uid)
                    if member:
                        summary[ans].append(member.display_name)

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
                summary_text = ""
                for ans in choices:
                    voters = summary[ans]
                    summary_text += f"**{ans}**: {len(voters)} ‡πÇ‡∏´‡∏ß‡∏ï\n"
                    if voters:
                        summary_text += ", ".join(voters) + "\n"

                # ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏õ‡∏ä‡πà‡∏≠‡∏á‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï
                await result_channel.send(
                    embed=discord.Embed(
                        title="üìä ‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
                        description=summary_text,
                        color=0x87CEEB
                    )
                )

                await interaction2.response.send_message(f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {self.values[0]}", ephemeral=True)

        view = discord.ui.View()
        view.add_item(AnswerSelect())

        sent_msg = await question_channel.send(embed=embed, view=view)
        vote_records[sent_msg.id] = {}  # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏´‡∏ß‡∏ï

        await interaction.response.send_message(f"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á {question_channel.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á {result_channel.mention}", ephemeral=True)


def disable_all_items(view: discord.ui.View):
    for item in view.children:
        item.disabled = True


class AskQuestionView(discord.ui.View):
    def __init__(self, guild: discord.Guild):
        super().__init__(timeout=None)
        self.guild = guild

        # Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        options = [discord.SelectOption(label=name, value=name) for name in QUESTION_CHOICES.keys()]
        self.select_choices = discord.ui.Select(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", options=options)
        self.add_item(self.select_choices)

        # Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        channels = [ch for ch in guild.channels if isinstance(ch, discord.TextChannel)]
        channel_options = [discord.SelectOption(label=ch.name, value=str(ch.id)) for ch in channels]
        self.select_question_channel = discord.ui.Select(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", options=channel_options)
        self.add_item(self.select_question_channel)

        # Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï
        self.select_result_channel = discord.ui.Select(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï", options=channel_options)
        self.add_item(self.select_result_channel)

        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        self.add_item(discord.ui.Button(label="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", style=discord.ButtonStyle.primary, custom_id="open_question_modal"))

        # ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        self.add_item(discord.ui.Button(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", style=discord.ButtonStyle.success, custom_id="submit_question"))

    @discord.ui.button(label="‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏£‡∏≠‡∏á", style=discord.ButtonStyle.secondary, custom_id="dummy_button")
    async def dummy_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        pass  # ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        custom_id = interaction.data.get("custom_id")

        if custom_id == "open_question_modal":
            # ‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            choice_set_name = self.select_choices.values[0] if self.select_choices.values else None
            question_channel_id = int(self.select_question_channel.values[0]) if self.select_question_channel.values else None
            result_channel_id = int(self.select_result_channel.values[0]) if self.select_result_channel.values else None

            if not choice_set_name or not question_channel_id or not result_channel_id:
                await interaction.response.send_message("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏ä‡πà‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True)
                return False

            modal = AskQuestionModal(choice_set_name, question_channel_id, result_channel_id)
            await interaction.response.send_modal(modal)
            return False

if custom_id == "open_question_modal":
    # ‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    choice_set_name = self.select_choices.values[0] if self.select_choices.values else None
    question_channel_id = int(self.select_question_channel.values[0]) if self.select_question_channel.values else None
    result_channel_id = int(self.select_result_channel.values[0]) if self.select_result_channel.values else None

    if not choice_set_name or not question_channel_id or not result_channel_id:
        await interaction.response.send_message("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏ä‡πà‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True)
        return False

    modal = AskQuestionModal(choice_set_name, question_channel_id, result_channel_id)
    modal.view_ref = self  # ‚úÖ ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
    await interaction.response.send_modal(modal)
    return False

            # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å modal ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏∂‡∏á‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ (‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å modal)
            # ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô object ‡∏ô‡∏µ‡πâ)
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° attribute ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏ß‡πâ (‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ)

            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô modal ‡∏Å‡πà‡∏≠‡∏ô
            if not hasattr(self, "question_text") or not self.question_text:
                await interaction.response.send_message("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏° '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°' ‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True)
                return False

            guild = self.guild
            question_channel = guild.get_channel(question_channel_id)
            result_channel = guild.get_channel(result_channel_id)

            if question_channel is None or result_channel is None:
                await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï", ephemeral=True)
                return False

            choices = QUESTION_CHOICES.get(choice_set_name)
            if not choices:
                await interaction.response.send_message("‚ùå ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
                return False

            embed = discord.Embed(
                title="üì¢ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
                description=self.question_text,
                color=0xFFB6C1
            )
            embed.set_footer(text=f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á | ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {choice_set_name}")

            class AnswerSelect(discord.ui.Select):
                def __init__(self):
                    opts = [discord.SelectOption(label=opt) for opt in choices]
                    super().__init__(placeholder="‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", options=opts, min_values=1, max_values=1)

                async def callback(self, interaction2: discord.Interaction):
                    user = interaction2.user
                    msg_id = interaction2.message.id
                    user_votes = vote_records.setdefault(msg_id, {})
                    user_votes[user.id] = self.values[0]

                    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï
                    summary = {}
                    for ans in choices:
                        summary[ans] = []

                    for uid, ans in user_votes.items():
                        member = guild.get_member(uid)
                        if member:
                            summary[ans].append(member.display_name)

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
                    summary_text = ""
                    for ans in choices:
                        voters = summary[ans]
                        summary_text += f"**{ans}**: {len(voters)} ‡πÇ‡∏´‡∏ß‡∏ï\n"
                        if voters:
                            summary_text += ", ".join(voters) + "\n"

                    # ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏õ‡∏ä‡πà‡∏≠‡∏á‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï
                    await result_channel.send(
                        embed=discord.Embed(
                            title="üìä ‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
                            description=summary_text,
                            color=0x87CEEB
                        )
                    )

                    await interaction2.response.send_message(f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {self.values[0]}", ephemeral=True)

            view = discord.ui.View()
            view.add_item(AnswerSelect())

            sent_msg = await question_channel.send(embed=embed, view=view)
            vote_records[sent_msg.id] = {}  # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏´‡∏ß‡∏ï

            # ‡∏õ‡∏¥‡∏î view ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á (disable ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π)
            disable_all_items(self)
            await interaction.message.edit(view=self)

            await interaction.response.send_message(
                f"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á {question_channel.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á {result_channel.mention}",
                ephemeral=True
            )
            return False

        return True

    async def on_modal_submit(self, modal: discord.ui.Modal):
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß discord.py ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô on_modal_submit ‡∏´‡∏£‡∏∑‡∏≠ callback ‡∏Ç‡∏≠‡∏á modal
        pass

# ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ AskQuestionModal ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ question ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà view
class AskQuestionModal(discord.ui.Modal, title="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"):
    question = discord.ui.TextInput(label="‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", style=discord.TextStyle.paragraph)

    def __init__(self, choice_set_name, question_channel_id, result_channel_id):
        super().__init__()
        self.choice_set_name = choice_set_name
        self.question_channel_id = question_channel_id
        self.result_channel_id = result_channel_id
        self.view_ref = None  # ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á view ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö

    async def on_submit(self, interaction: discord.Interaction):
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà view (‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô interaction)
        # ‡∏´‡∏≤ view ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏ô‡∏µ‡πâ
        # ‡πÇ‡∏î‡∏¢ interaction.message ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á view ‡∏ô‡∏±‡πâ‡∏ô

        # ‡∏î‡∏∂‡∏á view ‡∏ú‡πà‡∏≤‡∏ô interaction.message
        # ‡πÅ‡∏ï‡πà interaction.message ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô None ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å modal -> workaround:

        # ‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡πá‡∏ö reference view ‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î modal
        if self.view_ref:
            self.view_ref.question_text = self.question.value
            await interaction.response.send_message("‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏û‡∏ö view ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á", ephemeral=True)

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user_id = message.author.id
    username = message.author.name
    msg = message.content.strip()
    lower_msg = msg.lower()

    if lower_msg.startswith("doro ‡∏ñ‡∏≤‡∏°"):
        view = AskQuestionView(message.guild)
        await message.reply("üìã ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", view=view)
        return

    if lower_msg == "doro ‡∏Ç‡∏≠‡∏¢‡∏®":
        embed = discord.Embed(
            title="‡∏Ç‡∏≠‡∏¢‡∏®",
            description="‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ç‡∏≠‡∏¢‡∏®‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ô‡∏∞",
            color=0xFFB6C1
        )
        view = RequestRoleView()
        await message.channel.send(embed=embed, view=view)
        return

    if lower_msg == "doro ‡πÄ‡∏ß‡∏•‡∏≤":
        now = datetime.now(pytz.timezone('Asia/Bangkok'))
        await message.channel.send(f"üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {now.strftime('%Y-%m-%d %H:%M:%S')}")
        return

    if lower_msg == "doro ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        guild = message.guild
        if guild is None:
            await message.channel.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            return
        members = guild.members
        total = guild.member_count
        lines = [f"{m.display_name} - {str(m.status)}" for m in members]
        for i in range(0, len(lines), 20):
            chunk = lines[i:i+20]
            await message.channel.send(f"üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({total} ‡∏Ñ‡∏ô):\n" + "\n".join(chunk))
        return

    if lower_msg.startswith("doro ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"):
        search_term = msg[10:].strip()
        if not search_term:
            await message.channel.send("‚ùó ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            return
        results = VideosSearch(search_term, limit=1).result()
        if not results["result"]:
            await message.channel.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            return
        info = results["result"][0]
        await message.channel.send(f"üéµ ‡∏û‡∏ö‡∏Ñ‡∏•‡∏¥‡∏õ: **{info['title']}**\nüîó {info['link']}")
        return

    if lower_msg.startswith("doro‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°") or lower_msg.startswith("doro ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"):
        if lower_msg.startswith("doro‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"):
            content = msg[len("doro‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"):].strip()
        else:
            content = msg[len("doro ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"):].strip()
        parts = content.split(maxsplit=1)
        if len(parts) < 2:
            await message.channel.send("‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: doro‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° <channel_id> <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>")
            return
        try:
            channel_id = int(parts[0])
            text = parts[1]
            channel = bot.get_channel(channel_id)
            if channel is None:
                await message.channel.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á ID ‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡∏∞")
                return
            await channel.send(f"@everyone  {text}")
            await message.channel.send(f"‚úÖ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà {channel.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            await message.channel.send(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return

    if lower_msg.startswith("doro‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°") or lower_msg.startswith("doro ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"):
        if not message.author.guild_permissions.manage_messages:
            await message.channel.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ô‡∏∞")
            return

        if lower_msg.startswith("doro‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"):
            count_str = lower_msg[len("doro‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"):].strip()
        else:
            count_str = lower_msg[len("doro ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"):].strip()
        try:
            count = int(count_str)
            deleted = await message.channel.purge(limit=count + 1)
            await message.channel.send(f"üßπ ‡∏≠‡∏∑‡∏°...‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(deleted)-1} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß", delete_after=3)
        except Exception as e:
            await message.channel.send(f"‚ö†Ô∏è ‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return

    if lower_msg == "doro ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ïchannel":
        if not message.author.guild_permissions.manage_channels:
            await message.channel.send("‚ùå ‡∏ô‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏ö‡∏∑‡πà‡∏≠")
            return
        try:
            old_channel = message.channel
            new_channel = await old_channel.clone(reason="‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¥‡πÜ")
            await old_channel.delete()
            await new_channel.send("üí£ ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Æ‡πà‡∏≤‡∏Æ‡πà‡∏≤‡πÜ!")
        except Exception as e:
            await message.channel.send(f"‚ö†Ô∏è ‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô: {e}")
        return

    if lower_msg == "doro ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á":
        embed = discord.Embed(
            title="üìò ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á Doro ü§ñ",
            description=(
                "**üîπ bot ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£**\n"
                "**üîπ doro ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á**\n"
                "**üîπ doro ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ**\n"
                "**üîπ doro ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ <‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏õ>**\n"
                "**üîπ doro ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**\n"
                "**üîπ doro ‡πÄ‡∏ß‡∏•‡∏≤**\n"
                "**üîπ doro‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° <channel_id> <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>**\n"
                "**üîπ doro ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°<‡∏à‡∏≥‡∏ô‡∏ß‡∏ô>**\n"
                "**üîπ doro ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ïchannel**\n"
                "**üîπ doro ‡∏ñ‡∏≤‡∏° <‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°>**\n"
                "**üîπ doro ‡∏Ç‡πâ‡∏≠‡∏¢‡∏® (‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏®)**\n"
                "**üîπ !join / !play / !skip / !stop / !queue**"
            ),
            color=discord.Color.magenta()
        )
        await message.channel.send(embed=embed)
        return

    if lower_msg in custom_responses:
        await message.channel.send(custom_responses[lower_msg])
        return

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if user_id not in user_contexts:
        user_contexts[user_id] = []
    user_contexts[user_id].append((user_id, username, msg))
    if len(user_contexts[user_id]) > 5:
        user_contexts[user_id].pop(0)

    if msg.startswith("!"):
        await bot.process_commands(message)


server_on()
bot.run(DISCORD_TOKEN)


